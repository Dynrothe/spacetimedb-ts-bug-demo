// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, DatabaseTable, AlgebraicValue, ReducerEvent, Identity, Address, ClientDB, SpacetimeDBClient } from "@clockworklabs/spacetimedb-sdk";

export class DataTable extends DatabaseTable
{
	public static db: ClientDB = __SPACETIMEDB__.clientDB;
	public static tableName = "DataTable";
	public id: number;
	public randomDataOne: string;
	public randomDataTwo: string;

	public static primaryKey: string | undefined = "id";

	constructor(id: number, randomDataOne: string, randomDataTwo: string) {
	super();
		this.id = id;
		this.randomDataOne = randomDataOne;
		this.randomDataTwo = randomDataTwo;
	}

	public static serialize(value: DataTable): object {
		return [
		value.id, value.randomDataOne, value.randomDataTwo
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("randomDataOne", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new ProductTypeElement("randomDataTwo", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): DataTable
	{
		let productValue = value.asProductValue();
		let __Id = productValue.elements[0].asNumber();
		let __RandomDataOne = productValue.elements[1].asString();
		let __RandomDataTwo = productValue.elements[2].asString();
		return new this(__Id, __RandomDataOne, __RandomDataTwo);
	}

	public static *filterById(value: number): IterableIterator<DataTable>
	{
		for (let instance of this.db.getTable("DataTable").getInstances())
		{
			if (instance.id === value) {
				yield instance;
			}
		}
	}

	public static findById(value: number): DataTable | undefined
	{
		return this.filterById(value).next().value;
	}

	public static *filterByRandomDataOne(value: string): IterableIterator<DataTable>
	{
		for (let instance of this.db.getTable("DataTable").getInstances())
		{
			if (instance.randomDataOne === value) {
				yield instance;
			}
		}
	}

	public static *filterByRandomDataTwo(value: string): IterableIterator<DataTable>
	{
		for (let instance of this.db.getTable("DataTable").getInstances())
		{
			if (instance.randomDataTwo === value) {
				yield instance;
			}
		}
	}


}

export default DataTable;
